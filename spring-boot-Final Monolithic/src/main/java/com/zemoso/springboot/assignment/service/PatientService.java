package com.zemoso.springboot.assignment.service;

import com.zemoso.springboot.assignment.dto.PatientDTO;
import com.zemoso.springboot.assignment.entity.Doctor;
import com.zemoso.springboot.assignment.entity.Patient;
import com.zemoso.springboot.assignment.repository.DoctorRepository;
import com.zemoso.springboot.assignment.repository.PatientRepository;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class PatientService {

    private final PatientRepository patientRepository;
    private final DoctorRepository doctorRepository;

    public PatientService(PatientRepository patientRepository, DoctorRepository doctorRepository) {
        this.patientRepository = patientRepository;
        this.doctorRepository = doctorRepository;
    }

    public List<PatientDTO> getAllPatient() {
        List<Patient> patients = patientRepository.findAll();
        return patients.stream()
                .map(this::convertToDto)
                .toList();
    }
    public List<PatientDTO> getAllPatientByDoctorId(Long id) {
        List<Patient> patients = patientRepository.findAllByDoctorId(id);
        return patients.stream()
                .map(this::convertToDto)
                .toList();
    }
    public List<PatientDTO> getPatientsWithNullDoctor() {
        List<Patient> patients = patientRepository.findAllByDoctorIsNull();
        return patients.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    private static final String PATIENT_NOT_FOUND_MESSAGE = "Patient not found with id ";

    public PatientDTO getPatientById(Long id) {
        Patient patient = patientRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException(PATIENT_NOT_FOUND_MESSAGE + id));

        return convertToDto(patient);
    }

    private static final String DOCTOR_NOT_FOUND_MESSAGE = "Doctor not found with id ";

    public PatientDTO createPatient(PatientDTO patientDTO) {
        Doctor doctor = doctorRepository.findById(patientDTO.getDoctorId())
                .orElseThrow(() ->
                        new NoSuchElementException((DOCTOR_NOT_FOUND_MESSAGE +
                                patientDTO.getDoctorId())));

        Patient patient = convertToEntity(patientDTO);
        patient.setDoctor(doctor);

        // Clear the ID to ensure it is generated by the database
        patient.setId(null);

        patient = patientRepository.save(patient);
        return convertToDto(patient);
    }

    public PatientDTO updatePatient(PatientDTO patientDTO) {
        Patient existingPatient = patientRepository.findById(patientDTO.getId())
                .orElseThrow(()
                -> new NoSuchElementException(PATIENT_NOT_FOUND_MESSAGE + patientDTO.getId()));

        existingPatient.setFirstName(patientDTO.getFirstName());
        existingPatient.setLastName(patientDTO.getLastName());
        existingPatient.setEmail(patientDTO.getEmail());
        Doctor doctor = doctorRepository.findById(patientDTO.getDoctorId())
                .orElseThrow(()
                        -> new NoSuchElementException(PATIENT_NOT_FOUND_MESSAGE + patientDTO.getDoctorId()));
        existingPatient.setDoctor(doctor);

        Patient patient = patientRepository.save(existingPatient);
        return convertToDto(patient);
    }

    public void deletePatient(Long id) {
        patientRepository.deleteById(id);
    }

    private PatientDTO convertToDto(Patient patient) {
        PatientDTO patientDTO = new PatientDTO();
        patientDTO.setId(patient.getId());
        patientDTO.setFirstName(patient.getFirstName());
        patientDTO.setLastName(patient.getLastName());
        patientDTO.setEmail(patient.getEmail());
        if (patient.getDoctor() != null) {
            patientDTO.setDoctorId(patient.getDoctor().getId());
        } else {
            patientDTO.setDoctorId(null);
        }
        return patientDTO;
    }

    private Patient convertToEntity(PatientDTO patientDTO) {
        Patient patient = new Patient();
        patient.setId(patientDTO.getId());
        patient.setFirstName(patientDTO.getFirstName());
        patient.setLastName(patientDTO.getLastName());
        patient.setEmail(patientDTO.getEmail());
        return patient;
    }
}
